# ------------------------------ Config parsing------------------------- #
configfile: "config/config.yaml"

# ------------------------------ Include Snakefiles ------------------------- #
include: "rules/common.smk"
include: "rules/1_fastqc.smk"
include: "rules/2_trimming.smk"
include: "rules/3_assembly.smk"
include: "rules/4_length_filtering.smk"
include: "rules/5_clustering.smk"
#include: "rules/6_wtp.smk"
include: "rules/7_hmmsearch.smk"
# ------------------------------ Targets ------------------------------------ #

samples_df = samplesheet_to_df(config['samplesheet'])

FRACTIONS = samples_df['fraction'].unique().tolist()
VIRAL_SAMPLES = samples_df.loc[samples_df.fraction == 'viral', 'sample_id'].values.tolist()
MICROBIAL_SAMPLES = samples_df.loc[samples_df.fraction == 'microbial', 'sample_id'].values.tolist()

rule all:
    input:
        expand([
            "results/{fraction}/multiqc/multiqc_before.html",
            "results/{fraction}/multiqc/multiqc_after.html",
            ],
            fraction=FRACTIONS),
        expand("results/{fraction}/{sample}/trim/{sample}.trimmomatic_summary.txt",
                fraction=['viral'], sample=VIRAL_SAMPLES),
        expand("results/{fraction}/{sample}/trim/{sample}.trimmomatic_summary.txt",
                fraction=['microbial'], sample=MICROBIAL_SAMPLES),
        expand("results/{fraction}/{sample}/assembly/scaffolds.fasta",
                fraction=['viral'], sample=VIRAL_SAMPLES),
        expand("results/{fraction}/{sample}/assembly/scaffolds.fasta",
                fraction=['microbial'], sample=MICROBIAL_SAMPLES),
        expand("results/{fraction}/{sample}/scaffolds/{sample}_scaffolds.fasta",
                fraction=['viral'], sample=VIRAL_SAMPLES),
        expand("results/{fraction}/{sample}/scaffolds/{sample}_scaffolds.fasta",
                fraction=['microbial'], sample=MICROBIAL_SAMPLES),
        expand("results/{fraction}/{sample}/scaffolds/{sample}_scaffolds_gt1500.fasta",
                fraction=['viral'], sample=VIRAL_SAMPLES),
        expand("results/{fraction}/{sample}/scaffolds/{sample}_scaffolds_gt1500.fasta",
                fraction=['microbial'], sample=MICROBIAL_SAMPLES),
        # expand("results/{fraction}/{sample}/scaffolds/{sample}_transeq.fasta",
        #         fraction=['viral'], sample=VIRAL_SAMPLES),
        # expand("results/{fraction}/{sample}/scaffolds/{sample}_transeq.fasta",
        #         fraction=['microbial'], sample=MICROBIAL_SAMPLES),
        # expand("results/{fraction}/{sample}/hmmsearch/{sample}_hmmsearch.out",
        #         fraction=['viral'], sample=VIRAL_SAMPLES),
        # expand("results/{fraction}/{sample}/hmmsearch/{sample}_hmmsearch.out",
        #         fraction=['microbial'], sample=MICROBIAL_SAMPLES),
        "results/viral/concatenated_scaffolds/viral_scaffolds_gt1500.fasta",
        "results/microbial/concatenated_scaffolds/microbial_scaffolds_gt1500.fasta",
        # "results/viral/concatenated_scaffolds/viral_scaffolds_gt1500.fasta",
        # "results/microbial/concatenated_scaffolds/microbial_scaffolds_gt1500.fasta",
        # "results/viral/transeq/viral_transeq.fasta",
        # "results/microbial/transeq/microbial_transeq.fasta",
        # "results/viral/hmmsearch/viral_hmmsearch.out",
        # "results/microbial/hmmsearch/microbial_hmmsearch.out",
        # "results/clustering/viral_to_microbial_minimap_clustering.paf",
        # "results/clustering/microbial_to_viral_minimap_clustering.paf",



       #
       # "../results/wtp/microbe/microbe_scaffolds_gt1500/identified_contigs_by_tools/deepvirfinder.txt",
       # "../results/wtp/microbe/microbe_scaffolds_gt1500/literature/Citations.bib"
